Интерпретатор языка Форт - зачетная работа Золотухиной Анастасии и Голубурдо Елизаветы по Теории Компиляторов 2020 год */
Пример компиляции и запуска программы: g++ main.cpp && ./a.out

Язык является видоизмененным и ограниченным подмножеством языка Forth.
В языке операции осуществляются с рациональными числами.
Используется постфиксная запись операторов. Все вычисления осуществляются на стеке данных.
При запуске интерпретатора стек является пустым

 Тезисы реализуемого языка ФОРТ (в данной версии программы)
1) Зарезервированными словами языка являются только указанные в словаре слова
2) все команды отделяются пробелами
3) регистр не важен
4) Форт интерактивен, то есть сразу начинает работать
5) Постфискная форма записи
6) Стековая нотация
7) запрещаем называть переменные/функции зарезервированными словами системы
8) вывод на экран игнорирует все встроенные команды (кроме перевода строки)
9) многострочные комменатрии - допустимы
10) ошибки выводятся в файл errors.txt, отправленные на экран результаты печатаются в файл display.txt
11) если уже было объявлено такое слово, то слово не будет перезаписано
12) Список известных слов:
	{ - начало многострочного комментария
	} - конец многострочного комментария
	cr - печать перевода строки
	. - печать верхнего элемента из стека (если стек пустой, то ничего не печатать)
	." - начало печати конструкции в кавычках. пример ." hey if 3 " на печатает в displey.txt hey if 3 
	" - конец печати конструкции в кавычки
	+ - удаляет два верхних элемента стека (если они есть) - кладет на вершину стека их сумму
	- - удаляет два верхних элемента стека (если они есть) - кладет на вершину стека их разность 
	/ - удаляет два верхних элемента стека (если они есть) - кладет на вершину стека их отношение
	* - удаляет два верхних элемента стека (если они есть) - кладет на вершину стека их произведение
	mod - удаляет два верхних элемента стека (если они есть) - кладет на вершину стека их остаток
	drop - удаляет верхний элемент стека (если он есть)
	dup - дублирует верхний элемент стека (если он есть)
	over - копирует второй сверху элемент в стеке на вершину
	rot - меняет местами первый и третий элемент от вершины стека
	swap - меняет местами два элемента на вершине стека
	= - сравнение. удаляет два верхних элемента стека (если есть), кладет 1 на вершину, если они равны, 0 - если нет
	<> - сравнение. удаляет два верхних элемента стека (если есть), кладет 1 на вершину, если они не равны, 0 - если нет
	< - сравнение. удаляет два верхних элемента стека (если есть), кладет 1 на вершину, если второй сверху больше первого, 0 - если нет
	> - сравнение. удаляет два верхних элемента стека (если есть), кладет 1 на вершину, если второй сверху меньше первого, 0 - если нет
	0= - сравнение. удаляет верхний элемент стека (если есть), кладет 1 на вершину, если он равен 0, 0 - если нет
	0< - сравнение. удаляет верхний элемент стека (если есть), кладет 1 на вершину, если он больше 0, 0 - если нет
	0> - сравнение. удаляет верхний элемент стека (если есть), кладет 1 на вершину, если он меньше 0, 0 - если нет
	and - сравнение. удаляет два верхних элемента стека (если есть), кладет 1 на вершину,если (первый)&&(второй) - истина, 0 - если нет
	or - сравнение. удаляет два верхних элемента стека (если есть), кладет 1 на вершину,если (первый)||(второй) - истина, 0 - если нет
	?dup - дублирует верхний элемента стека, если он не 0
	: - начало инициализации переменной (слова/нового правила). Пример : name 2 + . ; когда встретится в коде слово "name" сработает правило описание после него, то есть, в данном примере, к верхнему элементу стека прибавят 2, а результат выведут на экран
	; - конец инициализации новой переменной. Повторая инициализация переменной с уже существующим именем не перезапишет старой, а в файле errors появится предупреждение
	if - начало условной конструкции. Пример (условие) if (инструкции) else (альтернативные инструкции) then. Если условие - истина, выполнит (инструкции), если ложь - (альтернативные инструкции)
	Также возможен вариант (условие) if (инструкции) then. выполнит (инструкции), если (условие) - истина, ничего - если ложь
	else 
	then
** - вложенные условные конструкции в данной версии не предусмотрены

Если ключевое слово работает с непустым стеком, в errors.txt напечатается предупреждение, а правило не сработает
Если правило использовалось без завершающего символа (без then, ;,  }) - в файле errors.txt появится предупреждение
13) Запрещено слово OK

